# -*- coding: utf-8 -*-
"""lstm_from_dataframe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18IMKarhKbjttZmwXFsshTMg8sUaqqOCQ
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
import pandas as pd
torch.manual_seed(1)

class LSTMTagger(nn.Module):

    def __init__(self, log_number, hidden_dim, tagset_size):
        super(LSTMTagger, self).__init__()
        self.hidden_dim = hidden_dim

        # The LSTM takes log embeddings as inputs, and outputs hidden states
        # with dimensionality hidden_dim.
        self.lstm = nn.LSTM(input_size = log_number, hidden_size = hidden_dim, bidirectional=True)  # <- change here

        # The linear layer that maps from hidden state space to tag space
        self.hidden2tag = nn.Linear(hidden_dim * 2, tagset_size)

        self.hidden = self.init_hidden()

    def init_hidden(self):
        # Before we've done anything, we dont have any hidden state.
        # Refer to the Pytorch documentation to see exactly
        # why they have this dimensionality.
        # The axes semantics are (num_layers * num_directions, minibatch_size, hidden_dim)
        return (torch.zeros(2, 1, self.hidden_dim),
                torch.zeros(2, 1, self.hidden_dim))    # <- change here: first dim of hidden needs to be doubled

    def forward(self, sentence):
        lstm_out, self.hidden = self.lstm(
            sentence.view(len(sentence), 1, -1), self.hidden)
        tag_space = self.hidden2tag(lstm_out.view(len(sentence), -1))
        tag_scores = F.log_softmax(tag_space, dim=1)
        return tag_scores




def dataframe_model_out(data, trained_model):

  model = LSTMTagger(7, 10, 9)
  model.load_state_dict(torch.load(trained_model))
  model.eval()

  facies_np = data.values
  max_well_length = 9572
  well_length = len(facies_np)

  scaled_set = facies_np[:,1:]
  scaled_set.shape

  for i,j in enumerate([1,3,4,5,6,7,8,9]):
    scaled_set[:,j] = (scaled_set[:,j]-np.mean(scaled_set[:,j]))/np.std(scaled_set[:,j])

  test_well = scaled_set[0][0]
  features = scaled_set[scaled_set[:,0]==test_well,3:].astype('float').tolist()
  labels = scaled_set[scaled_set[:,0]==test_well,2].astype('str').tolist()
  well_length = len(labels)
  a = np.empty((max_well_length-well_length), dtype='str')
  a[:] = np.nan
  a.astype('str')
  labels.extend(a)

  n_features = len(features[0])
  a = np.zeros((max_well_length-well_length, n_features), dtype='float')
  a.tolist()
  features.extend(a)

  test_data = (features, labels)

  # See what the scores are after training
  with torch.no_grad():
    inputs = torch.tensor(test_data[0]).float()
    tag_scores = model(inputs)


  predicted_facies_id = np.argmax(np.array(tag_scores), axis=1)
  scores = np.array(tag_scores) + np.abs(np.min(np.array(tag_scores)))
  scores = np.amax(scores, axis=1)/np.sum(scores, axis=1)

  predicted_facies_id = predicted_facies_id[0:well_length]
  predicted_facies_id[predicted_facies_id==np.array(tag_scores).shape[1]-1] = 0
  predicted_facies_id +=1
  scores = scores[0:well_length]
  scores[scores==np.array(tag_scores).shape[1]-1] = 0

  return predicted_facies_id, scores


#pred, scr = dataframe_model_out(pd.read_csv('https://github.com/roliveira/lithograph/raw/master/data/poseidon-0.csv'))
